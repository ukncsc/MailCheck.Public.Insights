//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MailCheck.Insights.SummaryGenerator.Test.InsightGenerators.Configuration {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MailCheck.Insights.SummaryGenerator.Test.InsightGenerators.Configuration.Resource" +
                            "s", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to **Systems that need configuring with SPF or DKIM:**
        ///
        ///| Email provider | Configuration advice |
        ///|---|---|
        ///|Google|This could be either a) G suite (if you use this) b) Google Groups c) forwarded emails via Gmail etc.|
        ///
        ///
        ///---
        ///
        ///**Important Note**
        ///
        ///This is a new feature with Mail Check analysing your DMARC reporting and producing the deductions above. Caveats as follows:
        ///- Due to particular system limitations, it may not be possible to configure SPF and DKIM for every provider. It is best to apply bot [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Test1Advisory1MD {
            get {
                return ResourceManager.GetString("Test1Advisory1MD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mail Check identified that 100% of your email traffic is failing SPF and DKIM checks, related to configuration issues with 1 email sending system(s).
        /// </summary>
        internal static string Test1Advisory1Txt {
            get {
                return ResourceManager.GetString("Test1Advisory1Txt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Looking at your DMARC reporting in the last 30 days, 100% of your emails are passing DMARC. Note this applies to emails from testDomain but not sub-domains (see separate DMARC Insights).
        ///
        ///**You should start considering how and when you will move to a DMARC policy of ‘Quarantine’**
        ///
        ///A DMARC policy of quarantine will ensure that malicious spoofed emails that fail SPF and DKIM checks are sent to Junk folders.
        ///
        ///You should consider the following:
        ///
        ///- Are all your email sending systems* on testDomain confi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Test3Advisory1MD {
            get {
                return ResourceManager.GetString("Test3Advisory1MD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mail Check has identified that 100% of your emails are passing DMARC, so you are ready (or nearly ready) to upgrade your DMARC policy to &apos;quarantine&apos;.
        /// </summary>
        internal static string Test3Advisory1Txt {
            get {
                return ResourceManager.GetString("Test3Advisory1Txt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Looking at your DMARC reporting in the last 30 days, 96.55% of your emails are passing DMARC. Note this applies to emails from testDomain but not sub-domains (see separate DMARC Insights).
        ///
        ///**You should start considering how and when you will move to a DMARC policy of ‘Quarantine’**
        ///
        ///A DMARC policy of quarantine will ensure that malicious spoofed emails that fail SPF and DKIM checks are sent to Junk folders.
        ///
        ///You should consider the following:
        ///
        ///- Are all your email sending systems* on testDomain con [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Test4Advisory1MD {
            get {
                return ResourceManager.GetString("Test4Advisory1MD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mail Check has identified that 96.55% of your emails are passing DMARC, so you are ready (or nearly ready) to upgrade your DMARC policy to &apos;quarantine&apos;.
        /// </summary>
        internal static string Test4Advisory1Txt {
            get {
                return ResourceManager.GetString("Test4Advisory1Txt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to **Well configured systems that are passing DMARC.**
        ///
        ///- test.com
        ///- test2.com
        ///
        ///---
        ///**Systems that need configuring with SPF or DKIM:**
        ///
        ///| Email provider | Configuration advice |
        ///|---|---|
        ///|Google|This could be either a) G suite (if you use this) b) Google Groups c) forwarded emails via Gmail etc.|
        ///
        ///
        ///---
        ///
        ///**Important Note**
        ///
        ///This is a new feature with Mail Check analysing your DMARC reporting and producing the deductions above. Caveats as follows:
        ///- Due to particular system limitations, it ma [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Test4Advisory2MD {
            get {
                return ResourceManager.GetString("Test4Advisory2MD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mail Check identified that 3.45% of your email traffic is failing SPF and DKIM checks, related to configuration issues with 1 email sending system(s).
        /// </summary>
        internal static string Test4Advisory2Txt {
            get {
                return ResourceManager.GetString("Test4Advisory2Txt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mail Check has not detected any systems that need configuring with SPF and DKIM
        ///
        ///Mail Check won&apos;t have detected any systems with low volumes, contributing &lt;1% of your overall email traffic.
        ///
        ///You may want to review your DMARC reporting to check if there are any further systems that need configuring.
        ///  
        ///[Review email traffic marked as quarantined](https://www.mailcheck.service.ncsc.gov.uk/app/domain-security/test.gov.uk/custom/0001-01-01/9999-12-31/false/emailtraffic?categoryFilter=quarantined).
        /// </summary>
        internal static string Test5Advisory1MD {
            get {
                return ResourceManager.GetString("Test5Advisory1MD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mail Check has not detected any systems that need configuring with SPF and DKIM.
        /// </summary>
        internal static string Test5Advisory1Txt {
            get {
                return ResourceManager.GetString("Test5Advisory1Txt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have a DMARC policy of quarantine or reject, which means emails from test.gov.uk that fail SPF and DKIM will be sent to Junk or blocked altogether.
        ///    
        ///However, Mail Check detected 1 system(s) that might be legitimate that are failing SPF and DKIM:
        ///
        ///test.com
        ///
        ///[Go to Email Traffic page for test.gov.uk](https://www.mailcheck.service.ncsc.gov.uk/app/domain-security/test.gov.uk/custom/0001-01-01/9999-12-31/false/emailtraffic)
        ///
        ///You either need to configure the system(s) with SPF and/or DKIM, or if t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Test6Advisory1MD {
            get {
                return ResourceManager.GetString("Test6Advisory1MD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mail Check has detected 1 system(s) that might be legitimate for you to review that is failing SPF and DKIM, and therefore being sent to Junk or blocked altogether.
        /// </summary>
        internal static string Test6Advisory1Txt {
            get {
                return ResourceManager.GetString("Test6Advisory1Txt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have a DMARC policy of quarantine or reject, which means emails from test.gov.uk that fail SPF and DKIM will be sent to Junk or blocked altogether.
        ///    
        ///However, Mail Check detected 2 system(s) that might be legitimate that are failing SPF and DKIM:
        ///
        ///test.com
        ///test2.com
        ///
        ///[Go to Email Traffic page for test.gov.uk](https://www.mailcheck.service.ncsc.gov.uk/app/domain-security/test.gov.uk/custom/0001-01-01/9999-12-31/false/emailtraffic)
        ///
        ///You either need to configure the system(s) with SPF and/or DK [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Test7Advisory1MD {
            get {
                return ResourceManager.GetString("Test7Advisory1MD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mail Check has detected 2 system(s) that might be legitimate for you to review that is failing SPF and DKIM, and therefore being sent to Junk or blocked altogether.
        /// </summary>
        internal static string Test7Advisory1Txt {
            get {
                return ResourceManager.GetString("Test7Advisory1Txt", resourceCulture);
            }
        }
    }
}
